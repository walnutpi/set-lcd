#!/bin/bash
if [ -z "$1" ]; then
    echo -e "\033[31m[Error]\033[0m"
    echo "please choose tft"
    exit 1
fi
if [ -z "$2" ]; then
    echo -e "\033[31m[Error]\033[0m"
    echo "please choose Function"
    exit 1
fi

TFT_NAME=$1


PATH_PWD="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH_TFT="${PATH_PWD}/tft"
PATH_DRIVER="${PATH_PWD}/drivers"
PATH_DRIVER_SAVE="/lib/modules/$(uname -r)/kernel/wpi-drivers/"
PATH_NOW_TFT="${PATH_TFT}/${TFT_NAME}"

PATH_CONF="${PATH_PWD}/xorg-conf"
PATH_DTB="${PATH_NOW_TFT}/dtb"
PATH_calibration="${PATH_NOW_TFT}/xorg-calibration"


source ${PATH_PWD}/common.sh
source ${PATH_NOW_TFT}/tft

Board_model="walnutpi-"
if [[ -f /proc/device-tree/model ]]; then
    Board_model=$(tr -d '\0' < /proc/device-tree/model)
fi


set -e

_enable_modules() {
    echo "compile drivers"
    make -C ${PATH_DRIVER}
    if [ ! -d $PATH_DRIVER_SAVE ]; then
        mkdir $PATH_DRIVER_SAVE
    fi
    cp -r ${PATH_DRIVER}/* $PATH_DRIVER_SAVE
    
    echo -e "\nupdate system drivers...."
    depmod
    
    modules_file="/etc/modules"
    for module in ${TFT_MODULE[@]}
    do
        _file_insert $modules_file $module
    done
}
_disable_modules() {
    modules_file="/etc/modules"
    for module in ${TFT_MODULE[@]}
    do
        _file_delete $modules_file $module
    done
}


# 更新设备树文件
_updoad_dtbo() {
    dts_files=$(find "$PATH_DTB" -type f -name "*${TFT_DTS_NAME}.dts")
    for dts_file in $dts_files; do
        dtbo_file="${dts_file%.dts}.dtbo"
        dtc -@  -I dts -O dtb -o "$dtbo_file" "$dts_file"
    done
    
    overlays_folder="/boot/overlays"
    dtb_files=$(find "$PATH_DTB" -type f -name "*${TFT_DTS_NAME}.dtbo")
    for file in $dtb_files; do
        cp "$file" "$overlays_folder"
    done
    
}

_dtb_replace() {
    local name=$1
    local value=$2
    
    local searchString="$name = <[0-9]*>"
    local replaceString="$name = <$value>"
    
    dts_files=$(find "$PATH_DTB" -type f -name "*${TFT_DTS_NAME}.dts")
    for dts_file in $dts_files; do
        dtbo_file="${dts_file%.dts}.dtbo"
        sed -i "s/$searchString/$replaceString/g" $dts_file
        dtc -@  -I dts -O dtb -o "$dtbo_file" "$dts_file"
    done
}

set_rotate_switch="0 90 180 270"
set_rotate() {
    OPT_operate=$1
    
    if [[ ! $set_rotate_switch =~ (^|[[:space:]])$OPT_operate($|[[:space:]]) ]]; then
        echo -e "\033[31m[Error]\033[0m"
        echo "error angle"
        exit 1
    fi
    
    if [ -d "/etc/X11/xorg.conf.d/" ]; then
        if [ -f  ${PATH_calibration}/calibration.conf-${OPT_operate} ]; then
            cp -rf "${PATH_calibration}/calibration.conf-${OPT_operate}"  /etc/X11/xorg.conf.d/99-calibration.conf
        fi
    fi
    
    _dtb_replace "rotate" $OPT_operate
    
    _updoad_dtbo
    set-device
}


_remove_desktop() {
    
    target_path="/usr/share/X11/xorg.conf.d"
    if [ -d "$target_path" ]; then
        for conf_file in ${USE_CONF_FILE[@]};
        do
            rm -rf  $target_path/${conf_file}
        done
    fi
    
}


_run_set_device() {
    _try_command set-device disable spidev1_0
    _try_command set-device disable spidev1_1
}

_disable_other() {
    local all_board=$(ls -d $PATH_TFT/*/ | sed 's#/##' )
    local board
    for board in ${all_board[@]};
    do
        board=$(basename $board)
        if [[ $board != $TFT_NAME ]];then
            set-lcd $board remove |> /dev/zero
        fi
    done
}

install() {
    _disable_other
    _run_set_device
    _enable_modules
    _updoad_dtbo
    set-device enable $TFT_DTS_NAME
    _add_flag
    target_path="/usr/share/X11/xorg.conf.d/"
    
    if [ -d "$target_path" ]; then
        for conf_file in ${USE_CONF_FILE[@]};
        do
            cp ${PATH_CONF}/${conf_file} $target_path
        done
    fi
    
    set_rotate 270
}


remove() {
    _disable_modules
    _remove_desktop
    _delete_flag
    set-device disable $TFT_DTS_NAME
}

if [[ $EUID -ne 0 ]]; then
    echo -e "\n\tError:  please run as root!\n"
    exit 1
fi





FUNCTION_NAME=$2
ARGUMENT=$3
$FUNCTION_NAME $ARGUMENT

if [[ $? -ne 0 ]]; then
    exit 1
fi
echo -e "\033[32m[ok]\033[0m"
echo -e "\n\tplease reboot\n"